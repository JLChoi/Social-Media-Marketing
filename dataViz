import numpy as np
import matplotlib.pyplot as plt
import statsmodels.tsa.stattools as stat
from iexCloud import get_price
from twitterAPI import getPostsByDay

ax1 = plt.subplot(211)
ax3 = plt.subplot(212)
plt.subplots_adjust(0.1, 0.1, 0.9, 0.9, 0.2, 0.5)

print("Company Choices: \nWENDY'S \nDUNKIN DONUTS \nVIACOM \nDISNEY \nADIDAS \nNIKE")
comp  = input("Enter company as it appears above: ")
date1 = input("Enter start date from 20190402 - 20190430 (YYYYMMDD): ")
date2 = input("Enter end date from 20190402 - 20190430(YYYYMMDD): ")

compDictionary = {"NIKE": "nke", "ADIDAS": "addyy", "WENDY'S": "wen", 
"DUNKIN DONUTS": "dnkn", "DISNEY": "dis", "VIACOM": "viab"}

start = int(date1[6:]) - 2
end = int(date2[6:]) - 2 

t = range(1, int(date2) - int(date1) + 2)
#data1 = [1, 2, 3, 4, 5,6,7, 8, 9, 10, 11, 12]
#data2 = [12,11,10, 9, 8, 7,6,5,4,3,2,1]
data1 = get_price(compDictionary[comp], date1, date2)
data2 = getPostsByDay(comp, start, end) #date end - 2
data3 = []
data4 = []
for i in range(1, len(data1)):
	try:
		data3.append((data1[i] - data1[i - 1]) / data1[i - 1])
	except:
		data3.append(1)
	try:
		data4.append((data2[i] - data2[i - 1]) / data2[i - 1])
	except:
		data4.append(1)
t2 = range(1, len(data3) + 1)


plt.title(comp + " Social Media and Stock Percent Change Comparison")
color = 'tab:red'
ax1.set_xlabel('Days')
ax1.set_ylabel('Share Price ($)', color=color)
ax1.plot(t, data1, color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Twitter Account Activity', color=color)  # we already handled the x-label with ax1
ax2.plot(t, data2, color=color)
ax2.tick_params(axis='y', labelcolor=color)

#fig.tight_layout()  # otherwise the right y-label is slightly clipped



plt.title(comp + " Social Media and Stock Comparison")
color = 'tab:red'
ax3.set_xlabel('Days')
ax3.set_ylabel('Share Price Percent Change ($)', color=color)
ax3.plot(t2, data3, color=color)
ax3.tick_params(axis='y', labelcolor=color)

ax4 = ax3.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax4.set_ylabel('Twitter Account Activity Percent Change', color=color)  # we already handled the x-label with ax1
ax4.plot(t2, data4, color=color)
ax4.tick_params(axis='y', labelcolor=color)

#fig.tight_layout()  # otherwise the right y-label is slightly clipped
arr = []
for i in range(1, len(data3)):
	arr.append((data3[i], data4[i]))



try:
	granger = stat.grangercausalitytests(arr, 5)	
except:
	pass

plt.show()

