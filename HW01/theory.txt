Tiffany Moi
tmoi
HW01

Question 1

a. Vertex | In-degree | Out-degree
   -------------------------------
      1	  |     2     |	    1
   -------------------------------
      2	  |     3     |	    2
   -------------------------------
      3	  |     1     |	    2
   -------------------------------
      4	  |     1     |	    2
   -------------------------------
      5	  |     2     |	    1
   -------------------------------
      6	  |     1     |	    2

b. 2, 1, 4, 5
Starting from 2, it will go to its neighbors, 1 and 4. Then it will go through
1's neighbors, which is 5. Then it will go to 4's neighbors, which is 5 and 1,
but they were already visited. Then we visit 5's neighbors, which is 2 and has
been seen before. Now we are done. 

c. 2, 4, 1, 5
Starting from two, it will go to one of its neighbors, say 4. Then it will go to
one of 4's neighbors, which could be 1. Then it will go through 1's neighbors,
which is 5. Then 5 will go to 2, but it has already seen it. All other neighbors
have already been discovered, so the program will end.


Question 2

This problem can be represented with a graph. The k actors would serve as the
vertices and the r pairs can be represented with an edge between the two actors.
Now that we have this setup, we want to be able to divide the vertices into two
groups such that no vertices in the same group share an edge. In other words, we
want to create a bipartite graph, if one exists.

We can do this using breadth-first search and an attribute for each actor which
will keep track of the type of actor they are (indie or mainstream). We can
start at any arbitrary actor and without loss of generality, label him/her
indie. Then we will begin to traverse their neighbors and we should set their
labels to mainstream, since we want the rivalries to be between two different
types of actors. As we traverse through the graph, we can keep performing these
set of actions of going to one actor and setting all of its other neighbors to
the opposite type until every actor has been assigned a type or in other words,
we have visited every vertex.

If it isn't possible to designate the actors, we will reach a conflict in which
we try to set an actor's type to the opposite of the one it already has. For
example, if we first designated actor A to be indie and we come back to it and
try to change its type to mainstream, we know we have reached a conflict and
we know that the actors can't be nicely split into two groups.

If we never reach such a conflict, we know that such a designation exists, and
their groups will be determined by the collection of actors who have the same
actor type.

The above algorithm will run in O(k+r) time because we will terminate the
program once we reach all vertices through the edges or we have reached a
conflict. 
